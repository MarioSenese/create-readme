// Generated by CoffeeScript 2.3.2
(function() {
  var DocsParser, Promise, fs, logger, path;

  logger = require('../logger');

  Promise = require('bluebird');

  fs = Promise.promisifyAll(require('fs'));

  path = require('path');

  // Creates a link to the documentation with the help of
  // [rawgit](https://rawgit.com/)
  // CAREFUL: The url can only handle limited amounts of traffic and you might get
  // blocked from the service, if it is accessed too often. For more information
  // see [rawgit](https://rawgit.com/)
  module.exports = DocsParser = (function() {
    class DocsParser {
      // Creates a new DocsParser
      // @param (options) [Object] An optional set of options
      // @option options encoding [String] Encoding for reading the file ['utf-8']
      // @option options docFile [String] Documentation entry point ['index.html']
      // @option options branch [String] The branch to use for the documentation ['master']
      constructor(options) {
        var base, base1, base2, ref, ref1;
        this.options = options;
        if (this.options == null) {
          this.options = {};
        }
        if ((base = this.options).encoding == null) {
          base.encoding = 'utf-8';
        }
        if ((base1 = this.options).branch == null) {
          base1.branch = (ref = (ref1 = this.options.git) != null ? ref1.branch : void 0) != null ? ref : 'master';
        }
        if ((base2 = this.options).docFile == null) {
          base2.docFile = 'index.html';
        }
      }

      // Check whether a documentation exists and the repo uses github.
      // If both conditions are true, create a link to the documentation with
      // [rawgit](https://rawgit.com/)
      // @param pkg [Object] package.json data
      // @returns [Promise<Object>] Documentation information [string]
      run(pkg) {
        var docDir, docFile, ref, ref1;
        logger.info("Creating documentation info");
        if (pkg.git == null) {
          logger.debug(" Not adding documentation due to missing git repo info");
          return Promise.resolve(null);
        }
        docDir = (ref = (ref1 = pkg.directories) != null ? ref1.doc : void 0) != null ? ref : './doc/';
        docFile = path.join(docDir, this.options.docFile);
        logger.debug(" Looking for doc file at " + docFile);
        return fs.statAsync(docFile).then(function(stats) {
          var rawgitLink;
          if (stats.isFile()) {
            rawgitLink = "https://rawgit.com/" + pkg.git.user + "/" + pkg.git.repo + "/" + pkg.git.branch + "/" + docFile.split(path.sep).join("/");
            logger.debug(" File found, adding rawgit link " + rawgitLink);
            return rawgitLink;
          } else {
            return null;
          }
        }).catch({
          code: 'ENOENT'
        }, function() {
          return null;
        });
      }

    };

    // @property [String] The name of this component
    DocsParser.name = "DocsParser";

    return DocsParser;

  }).call(this);

}).call(this);
