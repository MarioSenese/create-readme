// Generated by CoffeeScript 1.10.0
(function() {
  var Promise, UsageParser, fs, languages, path, winston;

  winston = require('winston');

  Promise = require('bluebird');

  fs = Promise.promisifyAll(require('fs'));

  path = require('path');

  languages = require('../../data/languages.json');

  module.exports = UsageParser = (function() {
    UsageParser.name = "UsageParser";

    function UsageParser(options) {
      var base, base1, base2;
      this.options = options;
      if (this.options == null) {
        this.options = {};
      }
      if ((base = this.options).encoding == null) {
        base.encoding = 'utf-8';
      }
      if ((base1 = this.options).addUsage == null) {
        base1.addUsage = '';
      }
      if ((base2 = this.options).replaceReferences == null) {
        base2.replaceReferences = true;
      }
    }

    UsageParser.prototype.run = function(pkg) {
      var exampleDir, ref, ref1;
      winston.info("Creating usage examples");
      exampleDir = (ref = (ref1 = pkg.directories) != null ? ref1.example : void 0) != null ? ref : this.options.exampleDir;
      exampleDir = path.join(process.cwd(), exampleDir);
      winston.debug(" Looking for examples in dir " + exampleDir);
      return fs.readdirAsync(exampleDir)["catch"]({
        code: 'ENOENT'
      }, function() {
        return [];
      }).filter(function(file) {
        return Object.keys(languages).indexOf(path.extname(file)) > -1;
      }).map((function(_this) {
        return function(file) {
          var content;
          winston.debug(" Parsing file" + file);
          content = fs.readFileAsync(path.join(exampleDir, file), {
            encoding: _this.options.encoding
          }).then(function(content) {
            var regex;
            if (!_this.options.replaceReferences) {
              return content;
            }
            winston.debug(" Replacing occurances of '../' and \"../\" with " + pkg.name);
            regex = /(?:'\.\.\/')|(?:"\.\.\/")/g;
            return content.replace(regex, "'" + pkg.name + "'");
          });
          return Promise.resolve({
            lang: languages[path.extname(file)],
            content: content
          }).props();
        };
      })(this)).then((function(_this) {
        return function(examples) {
          var ref2;
          if ((examples.length === (ref2 = _this.options.addUsage.length) && ref2 === 0)) {
            winston.debug(" No examples and no addUsage");
            return null;
          } else {
            return {
              examples: examples,
              description: _this.options.addUsage
            };
          }
        };
      })(this));
    };

    return UsageParser;

  })();

}).call(this);
